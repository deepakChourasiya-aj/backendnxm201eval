
Nxm eval201..


1 Create an index on the user_id field in the purchases collection to improve the performance of your queries.

nxmeval> db.purchases.createIndex({user_id:1})
there i am  creating the index in mongodb of user_id..

2 Use the $lookup operator in an aggregation pipeline to join the users and purchases collections, and return a new documents that contains the name and age of each user, along with their purchases. The output should look like this:
nxmeval> db.users.aggregate([{$lookup:{from:"purchases",localField:'_id',foreignField:"user_id",as:"purchases"}}])

3 Use the $group operator in an aggregation pipeline to calculate the total number of purchases and total spending for each user. The output should look like this:

nxmeval> db.purchases.aggregate([{$group:{_id:'$user_id',total_purchases:{$sum:1},total_spending:{$sum:'$price'}}},{$lookup:{from:'users',localField:'_id',foreignField:'_id',as:'userdata'}}])

4 Use the $sort operator to sort the output documents by total spending in descending order. The output should look like this:

nxmeval> db.purchases.aggregate([{$group:{_id:'$user_id',total_purchases:{$sum:1},total_spending:{$sum:'$price'}}},{$lookup:{from:'users',localField:'_id',foreignField:'_id',as:'userdata'}},{$sort:{total_spending:-1}}])

5 Cross check the total_purchases and total_spending, if it is correct, by adding more purchases in the purchases collection and running your aggregation pipeline again.
nxmeval> db.purchases.insertMany([{_id:7,user_id:1,item:"glass",price:30},{_id:8,user_id:2,item:"pen",price:20},{_id:9,user_id:3,item:"rubber",price:30}])

there i have inserted more data and checked everything is working fine and all correct.